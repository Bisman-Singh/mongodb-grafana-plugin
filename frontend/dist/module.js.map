{"version":3,"file":"module.js","mappings":"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","sources":["webpack://mongodb-grafana-datasource/external amd \"@grafana/data\"","webpack://mongodb-grafana-datasource/external amd \"@grafana/runtime\"","webpack://mongodb-grafana-datasource/external amd \"@grafana/ui\"","webpack://mongodb-grafana-datasource/external amd \"react\"","webpack://mongodb-grafana-datasource/external amd \"rxjs\"","webpack://mongodb-grafana-datasource/webpack/bootstrap","webpack://mongodb-grafana-datasource/webpack/runtime/compat get default export","webpack://mongodb-grafana-datasource/webpack/runtime/define property getters","webpack://mongodb-grafana-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://mongodb-grafana-datasource/webpack/runtime/make namespace object","webpack://mongodb-grafana-datasource/./types.ts","webpack://mongodb-grafana-datasource/./datasource.ts","webpack://mongodb-grafana-datasource/./module.ts","webpack://mongodb-grafana-datasource/./components/ConfigEditor.tsx","webpack://mongodb-grafana-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport enum QueryType {\n  table = 'table',\n  timeserie = 'timeserie',\n}\n\nexport interface MyQuery extends DataQuery {\n  collection: string;\n  queryText: string;\n  queryType: QueryType;\n}\n\nexport interface TimeSeriesResponse {\n  target: string;\n  datapoints: object[];\n}\n\nexport interface TableResponse {\n  type: string;\n  rows: object[];\n  columns: string[];\n}\n\nexport interface ConnectionResponse {\n  status: string;\n  message: string;\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  backendUri: string;\n  mongoConnString: string;\n  databaseName: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {}\n","import { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport {\n  CoreApp,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport {\n  MyQuery,\n  MyDataSourceOptions,\n  TimeSeriesResponse,\n  TableResponse,\n  ConnectionResponse,\n  QueryType,\n} from './types';\nimport { lastValueFrom } from 'rxjs';\n\ninterface PluginConfigs {\n  url: string;\n  db: string;\n}\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  baseUrl: string;\n  db: PluginConfigs;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>,\n  ) {\n    super(instanceSettings);\n    this.baseUrl = instanceSettings.jsonData.backendUri;\n    this.db = {\n      url: instanceSettings.jsonData.mongoConnString,\n      db: instanceSettings.jsonData.databaseName,\n    };\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\n    return {\n      collection: '',\n      queryText: '',\n      queryType: QueryType.timeserie,\n    };\n  }\n\n  filterQuery(query: MyQuery): boolean {\n    // if no query has been provided, prevent the query from being executed\n    return !!query.queryText;\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    try {\n      const { targets } = options;\n      const payload = {\n        ...options,\n        targets: targets.map((target) => ({\n          ...target,\n          queryText: `{collection: \"${target.collection}\", aggregations: ${target.queryText}}`,\n        })),\n        db: { ...this.db },\n      };\n      const response = (await this.request('/query', payload)) as FetchResponse<\n        TimeSeriesResponse[] | TableResponse[]\n      >;\n      return { data: response.data };\n    } catch (err: any) {\n      return { data: [], error: { message: err?.message ?? err } };\n    }\n  }\n\n  async request(\n    url: string,\n    body: object,\n  ): Promise<\n    FetchResponse<TimeSeriesResponse[] | TableResponse[] | ConnectionResponse>\n  > {\n    const response = getBackendSrv().fetch<\n      TimeSeriesResponse[] | TableResponse[] | ConnectionResponse\n    >({\n      url: `${this.baseUrl}${url}`,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: JSON.stringify(body),\n    });\n    return lastValueFrom(response);\n  }\n\n  /**\n   * Checks whether we can connect to the API.\n   */\n  async testDatasource() {\n    try {\n      const response = (await this.request('/', {\n        db: this.db,\n      })) as FetchResponse<ConnectionResponse>;\n      if (response.status === 200) {\n        return {\n          status: 'success',\n          message: 'Success',\n        };\n      } else {\n        return {\n          status: 'error',\n          message: response.data.message ?? 'unknown',\n        };\n      }\n    } catch (err: any) {\n      return {\n        status: 'error',\n        message: err?.message ?? err,\n      };\n    }\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props\n  extends DataSourcePluginOptionsEditorProps<\n    MyDataSourceOptions,\n    MySecureJsonData\n  > {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n\n  // Secure field (only sent to the backend)\n  const onFieldChanged = (\n    event: ChangeEvent<HTMLInputElement>,\n    field: string\n  ) => {\n    const jsonData = {\n      ...options.jsonData,\n      [field]: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  return (\n    <>\n      <InlineField\n        label=\"mongodb connection string\"\n        labelWidth={30}\n        interactive\n        tooltip={'mongodb connection string'}\n      >\n        <Input\n          required\n          id=\"config-editor-api-key\"\n          value={options.jsonData?.mongoConnString}\n          placeholder=\"mongodb+srv://[username:password@]host[/[defaultauthdb][?options]]\"\n          width={40}\n          onReset={() => {}}\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            onFieldChanged(event, 'mongoConnString')\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"mongodb database name\"\n        labelWidth={30}\n        interactive\n        tooltip={'mongodb database name'}\n      >\n        <Input\n          required\n          id=\"config-editor-api-key\"\n          value={options.jsonData?.databaseName}\n          placeholder=\"dbname\"\n          width={40}\n          onReset={() => {}}\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            onFieldChanged(event, 'databaseName')\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"backend url\"\n        labelWidth={30}\n        interactive\n        tooltip={'mongodb plugin backend url'}\n      >\n        <Input\n          required\n          id=\"config-editor-api-key\"\n          value={options.jsonData?.backendUri}\n          placeholder=\"http://localhost:4000\"\n          width={40}\n          onReset={() => {}}\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            onFieldChanged(event, 'backendUri')\n          }\n        />\n      </InlineField>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  InlineField,\n  TextArea,\n  Stack,\n  Select,\n  Modal,\n  Button,\n  Spinner,\n} from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery, QueryType } from '../types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { lastValueFrom } from 'rxjs';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nconst queryHint = `[\n    {\n      string: \"string\",\n      date: new Date(),\n      id: new ObjectId(\"573a1393f29313caabcdc50e\"),\n      bool: true,\n      float: 12345.4,\n      expandable1: $from,\n      expandable2: $to,\n      expandable3: $intervalMs\n    }\n    {\n      ...more stages\n    }\n  ]`;\n\nexport function QueryEditor(props: Props) {\n  const {\n    query,\n    datasource: { baseUrl, db },\n    onChange,\n    onRunQuery,\n  } = props;\n  const { collection, queryText, queryType } = query;\n  const [collections, setCollections] = React.useState<string[]>([]);\n  const [spinner, setSpinner] = React.useState(true);\n  const [errorMsg, setErrorMsg] = React.useState('');\n\n  React.useEffect(() => {\n    if (!!db && !!baseUrl) {\n      (async () => {\n        try {\n          const response = await getBackendSrv().fetch<string[]>({\n            url: `${baseUrl}/collections`,\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            data: JSON.stringify(db),\n          });\n          const values = await lastValueFrom(response);\n          const collections = values.data;\n          if (!collection && collections.length > 0) {\n            onChange({ ...query, collection: collections[0] });\n          }\n          setCollections(collections);\n          setSpinner(false);\n        } catch (err: any) {\n          setErrorMsg(err?.message ?? err);\n        }\n      })();\n    }\n    // eslint-disable-next-line\n  }, [db, baseUrl]);\n\n  const queryUI = (\n    <Stack gap={0} direction=\"column\">\n      <InlineField label=\"Type\" labelWidth={20}>\n        <Select\n          width={20}\n          options={[\n            { label: QueryType.table, value: QueryType.table },\n            { label: QueryType.timeserie, value: QueryType.timeserie },\n          ]}\n          value={queryType}\n          onChange={(sv) => onChange({ ...query, queryType: sv.value!! })}\n        />\n      </InlineField>\n      <InlineField label=\"Collection Name\" labelWidth={20}>\n        <Select\n          width={50}\n          options={collections.map((collection) => ({\n            label: collection,\n            value: collection,\n          }))}\n          value={collection}\n          onChange={(sv) => onChange({ ...query, collection: sv.value!! })}\n        />\n      </InlineField>\n      <InlineField label=\"Aggregation Pipeline\" labelWidth={20}>\n        <TextArea\n          style={{ width: 500, minHeight: 200 }}\n          value={queryText ?? ''}\n          placeholder={queryHint}\n          onChange={(event) => {\n            onChange({ ...query, queryText: event.currentTarget.value });\n          }}\n          onBlur={(event) => {\n            onChange({ ...query, queryText: event.target.value });\n            onRunQuery();\n          }}\n        />\n      </InlineField>\n    </Stack>\n  );\n\n  const loadingUI = (\n    <Stack gap={0} direction=\"column\">\n      <Spinner />\n      <Modal title=\"error\" isOpen={!!errorMsg}>\n        {errorMsg}\n        <Modal.ButtonRow>\n          <Button onClick={() => setErrorMsg('')}>Ok</Button>\n        </Modal.ButtonRow>\n      </Modal>\n    </Stack>\n  );\n\n  return spinner ? loadingUI : queryUI;\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","QueryType","DataSource","DataSourceApi","getDefaultQuery","_","collection","queryText","queryType","timeserie","filterQuery","query","options","targets","payload","map","target","db","data","request","err","error","message","url","body","response","getBackendSrv","fetch","baseUrl","method","headers","JSON","stringify","lastValueFrom","status","constructor","instanceSettings","super","this","jsonData","backendUri","mongoConnString","databaseName","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","onFieldChanged","event","field","InlineField","label","labelWidth","interactive","tooltip","Input","required","id","placeholder","width","onReset","onChange","setQueryEditor","datasource","onRunQuery","collections","setCollections","React","spinner","setSpinner","errorMsg","setErrorMsg","length","queryUI","Stack","gap","direction","Select","table","sv","TextArea","style","minHeight","currentTarget","onBlur","loadingUI","Spinner","Modal","title","isOpen","ButtonRow","Button","onClick"],"sourceRoot":""}